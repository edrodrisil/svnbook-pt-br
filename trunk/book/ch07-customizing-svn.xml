<chapter id="svn.customization">
  <title>Customizando sua Experiência com Subversion</title>

  <para>Controle de versão pode ser um tema complexo, assim como
      arte ou ciência, e oferecer variadas maneiras fazer as 
      coisas. Através desse livro você leu sobre vários sub-comandos
      do cliente de linha de comando e as opções para modificar
      seu comportamento. Nesse capítulo, vamos dar uma olhada 
      e mais maneiras de customizar o jeito que o Subversion 
      trabalha para você&mdash;setando as configurações em 
      tempo de execução, usando ajuda de aplicações externas,
      a interação do Subversion com as configurações locais do
      sistema operacional, e assim por diante.</para>

  <!-- TODO(cmpilato): Gut the runtime config stuff like I did the
       property stuff, making larger topical sections to which the
       runtime config stuff generally refers.  Like already exists for
       external diff/diff3, add, for example, a section on external
       editors. -->

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.confarea">
    <title>Área de Configuração do Tempo de Execução</title>
    
    <para>O Subversion oferece muitos comportamentos opcionais que podem ser
      controlados pelo usuário.  Muitas dessas opções são do tipo
      que um usuário desejaria aplicar a todas as operações do Subversion.
      Então, em vez de obrigar os usuários lembrar de argumentos de linha de comando
      para especificar essas opções, e usá-las para toda
      operação que ele realizar, o Subversion usa arquivos de configuração,
      segregadas em uma área de configuração do Subversion.</para>

    <para>A  <firstterm>área de configuração</firstterm> do Subversion é
      uma hierarquia de opções com nomes e seus valores, em dois níveis.
      Normalmente, isto resume-se a um diretório especial que contém
      <firstterm>arquivos de configuração</firstterm> (o primeiro nível),
      os quais são apenas arquivos de texto no formato padrão INI (com
      <quote>seções</quote> provendo o segundo nível).  Estes arquivos
      podem ser facilmente editados usando seu editor de texto favorito (como
      Emacs ou vi), e contém diretivas que são lidas pelo cliente para
      determinar quais dos vários comportamentos opcionais o usuário
      prefere.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.confarea.layout">
      <title>Estrutura da Área de Configuração</title>

      <para>A primeira vez que o cliente de linha de comando
        <command>svn</command> é executado, ele cria uma área de
        configuração por usuário.  Em sistemas Unix, esta área aparece
        como um diretório chamado <filename>.subversion</filename> no
        diretório pessoal do usuário.  Em sistemas Win32, o Subversion cria uma
        pasta chamada <filename>Subversion</filename>, geralmente dentro
        da área <filename>Application Data</filename> do diretório do
        perfil do usuário (que, por padrão, é normalmente um diretório
        oculto).  No entanto, nesta plataforma o local exato
        difere de sistema para sistema e é definido pelo Registro do
        Windows.
        <footnote>
          <para>A variável de ambiente <literal>APPDATA</literal>
            aponta para a área <filename>Application Data</filename>,
            assim você sempre pode referir a esta pasta como
            <filename>%APPDATA%\Subversion</filename>.</para>
        </footnote>
        Nós referiremos à área de configuração por usuário usando seu nome em
        Unix, <filename>.subversion</filename>.</para>

      <para>Além da área de configuração por usuário, o Subversion
        também reconhece a existência de uma área de configuração a nível
        de sistema.  Isto oferece aos administradores de sistema a habilidade de
        estabelecer padrões para todos usuários em uma determinada máquina.  Note
        que a área de configuração a nível de sistema não define uma
        política obrigatória&mdash;as definições na área de configuração
        do usuário substitui as de nível de sistema, e os
        argumentos de linha de comando passados ao programa <command>svn</command>
        possuem a palavra final no comportamento realizado.  Em plataformas
        Unix, espera-se que a área de configuração do sistema
        esteja no diretório <filename>/etc/subversion</filename>;
        em máquinas Windows, ela aparece em um diretório
        <filename>Subversion</filename> dentro do local
        <filename>Application Data</filename> do sistema (novamente, como
        especificado pelo Registro do Windows).  Diferentemente do caso
        por usuário, o programa <command>svn</command> não tenta
        criar a área de configuração a nível de sistema.</para>

      <para>A área de configuração por usuário atualmente contém três
        arquivos&mdash;dois arquivos de configuração (<filename>config</filename> e
        <filename>servers</filename>), e um arquivo <filename>README.txt</filename> 
        que descreve o formato INI.  Quando são criados,
        os arquivos contém valores padrão para cada uma das
        opções suportadas pelo Subversion, a maioria comentadas e agrupadas
        com descrições textuais sobre como os valores para as chaves
        afetam o comportamento do Subversion.  Para mudar um certo comportamento,
        você apenas precisa carregar o arquivo de configuração apropriado em
        um editor de texto, e modificar o valor da opção desejada.  Se, a
        qualquer momento, você desejar ter as definições da configuração padrão
        restauradas, você pode simplesmente remover (ou renomear) seu diretório de
        configuração e então executar algum comando <command>svn</command>
        inofensivo, como o <command>svn --version</command>.  Um novo
        diretório de configuração com o conteúdo padrão será
        criado.</para>

      <para>A área de configuração por usuário também contém uma cache dos
        dados de autenticação.  O diretório <filename>auth</filename>
        possui um conjunto de subdiretórios que contém pedaços das informações
        armazenadas e usadas pelos vários métodos de autenticação suportados
        pelo Subversion.  Este diretório é criado de tal forma
        que somente o próprio usuário possui permissão para ler seu
        conteúdo.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.confarea.windows-registry">
      <title>Configuração e o Registro do Windows</title>

      <para>Além da usual área de configuração baseada em arquivos INI,
        clientes Subversion que executam sob plataformas Windows podem
        também podem usar o registro do Windows para armazenar dados de
        configuração.  Os nomes das opções e seus valores são os mesmos
        que os dos arquivos INI.  A hierarquia
        <quote>arquivo/seção</quote> também é preservada, ainda que
        abordada de maneira ligeiramente diferente&mdash;neste esquema,
        arquivos são apenas níveis na árvore de chaves do
        registro.</para>

      <para>O Subversion procura por valores de configuração globais em
        nível de sistema sob a chave
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>.
        Por exemplo, a opção <literal>global-ignores</literal>, a qual
        está está na seção <literal>miscellany</literal> do arquivo 
        <filename>config</filename>, poderia ser encontrada em 
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        Valores de configuração por usuário devem estar armazenados
        abaixo de 
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.
      </para>

      <para>Opções de configuração baseadas em registro são analisadas 
        <emphasis>antes</emphasis> do que suas contrapartes em arquivo,
        assim elas são sobrescritas pelos valores encontrados nos
        arquivos de configuração.  Em outras palavras, o Subversion
        procura por informação de configuração nos seguintes locais em
        um sistema Windows; a relação abaixo organiza os locais em ordem
        dos de maior para os de menor precedência:</para>
      
      <orderedlist>
        <listitem>
          <para>Opções de linha de comando</para>
        </listitem>
        <listitem>
          <para>Arquivos INI por usuário</para>
        </listitem>
        <listitem>
          <para>Valores de registro por usuário</para>
        </listitem>
        <listitem>
          <para>Arquivos INI globais em nível de sistema</para>
        </listitem>
        <listitem>
          <para>Valores de registro em nível de sistema</para>
        </listitem>
      </orderedlist>

      <para>Adicionalmente, o registro do Windows não suporta a noção de
        algo sendo <quote>comentado</quote>.  No entanto, o Subversion
        irá ignorar quaisquer opções cujos nome da chave comece com um
        caracter de cerquilha (<literal>#</literal>).  Na prática,
        efetivamente isto permite que você comente uma opção do
        Subversion sem remover a chave inteira do registro, o que
        obviamente simplifica o processo de restaurar tal opção.</para>

      <para>O cliente de linha de comando, <command>svn</command>, tenta
        escrever no registro do Windows, e então não tentará escrever
        uma área de configuração padrão.  Você pode criar as chaves que
        você precisa usando o programa <command>REGEDIT</command>.
        Alternativamente, você pode criar um arquivo 
        <filename>.reg</filename>, e então dar um duplo clique nele a
        partir do Windows Explorer, o que irá fazer com que os dados
        sejam mesclados ao seu registro.</para>

      <example id="svn.advanced.confarea.windows-registry.ex-1">
        <title>Arquivo (.reg) com Entradas de Registro de Exemplo.</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-exceptions"=""
"#http-timeout"="0"
"#http-compression"="yes"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-trust-default-ca"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-passwords"="yes"
"#store-auth-creds"="yes"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"
"#diff-cmd"=""
"#diff3-cmd"=""
"#diff3-has-program-arg"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store"
"#log-encoding"=""
"#use-commit-times"=""
"#no-unlock"=""
"#enable-auto-props"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]

</programlisting>
      </example>

      <para>O exemplo anterior mostra o conteúdo de um arquivo 
        <filename>.reg</filename> que contém algumas das opções de
        configuração mais comuns e seus valores padrão.  Note a presença
        tanto de configurações em nível de sistema (para opções
        relacionadas a proxies de rede) e configurações específicar por
        usuário (programa editor de texto e armazenamento de senhas,
        entre outras).  Também note que todas as opções estão
        efetivamente comentadas.  Você precisa apenas remover o caracter
        de cerquilha (<literal>#</literal>) do começo dos nomes das
        opções, e definir os valores como você quiser.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.confarea.opts">
      <title>Opções de Configuração</title>

      <!-- TODO(cmpilato): Rework and move this section to the Reference -->

      <para>Nesta seção, vamos discutir as opções de configuração
        específicas de tempo de execução que são atualmente suportadas
        pelo Subversion.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.advanced.confarea.opts.servers">
        <title>Servidores</title>

        <para>O arquivo <filename>servers</filename> contém opções de
          configuração relacionadas à camada de rede.  Há dois nomes de
          seção neste arquivo&mdash;<literal>groups</literal> e
          <literal>global</literal>.  A seção <literal>groups</literal>
          é essencialmente uma tabela de referência cruzada.  As chaves
          nesta seção são os nomes de outras seções no arquivo; seus
          valores são <firstterm>globs</firstterm>&mdash;indicadores
          textuais que possivelmente podem conter caracteres
          coringa&mdash;que são comparados com os nomes de hosts das
          máquinas às quais as requisições do Subversion são
          enviadas.</para>

        <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>

        <para>Quando o Subversion é usado em rede, ele tenta casar o
          nome do servidor ao qual está tentando alcançar com o nome do
          grupo na seção <literal>groups</literal>.  Se encontrar uma
          correspondência, o Subversion então procura por uma seção no
          arquivo <filename>servers</filename> com o mesmo nome do grupo
          em questão.  A partir dessa seção, ele lê as configurações de
          rede atuais.</para>

        <para>A seção <literal>global</literal> contém as configurações
          que são feitas para todos os servidores para os quais não haja
          correspondência na seção <literal>groups</literal>.  As opções
          disponíveis nesta seção são exatamente as mesmas que aquelas
          válidas para outras seções de servidores no arquivo (exceto, é
          claro, a seção especial <literal>groups</literal>), e são como
          o que se segue:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-proxy-exceptions</literal></term>
            <listitem>
              <para>Isto especifica uma lista de padrões de nomes de
                hosts separados por vírgulas e que devem ser acessados
                diretamente, sem que seja por meio de uma máquina de
                proxy.  A sintaxe desses padrões é a mesma que utilizada
                no shell do Unix para nomes de arquivos.  Um nome de
                host de um repositório que corresponda a qualquer desses
                padrões não será acessado através de um proxy.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
              <para>Isto especifica o nome do host do computador proxy
                através do qual suas requisições HTTP para o Subversion
                devem passar.  Seu padrão é um valor vazio, o que
                significa que o Subversion não tentará rotear
                requisições HTTP através de um computador proxy, ao
                invés disso tentando acessar a máquina de destino
                diretamente.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
              <para>Isto especifica o número de porta a ser usada no
                host proxy.  Seu valor padrão também é vazio.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
              <para>Isto especifica o nome de usuário a ser informado
                para a máquina proxy.  Seu valor padrão é vazio.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
              <para>Isto especifica a senha do usuário a ser informada
                para a máquina proxy.  Seu valor padrão é vazio.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
              <para>Isto especifica o total de tempo, em segundos, a
                aguardar por uma resposta do servidor.  Se você tiver
                problemas com uma conexão de rede lenta e que façam com
                que as operações do Subversion terminem por expiração do
                limite de tempo, você deveria aumentar o valor desta
                opção.  O valor padrão é <literal>0</literal>, o que
                instrui a biblioteca HTTP da camada inferior, a Neon,
                para usar sua própria configuração de limite de
                tempo.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-compression</literal></term>
            <listitem>
              <para>Isto especifica se o Subversion deve ou não tentar
                compactar as requisições de rede feitas a servidores
                compatíveis com DAV.  O valor padrão é
                <literal>yes</literal> (ainda que a compactação só irá
                ocorrer se o suporte a este recurso estiver compilado na
                camada de rede).  Atribua a esta opção o valor 
                <literal>no</literal> para desabilitar compactação, por
                exemplo ao depurar transmissões de rede.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
              <para>Isto é uma máscara inteira que a biblioteca HTTP da
                camada inferior, a Neon, utiliza para escolher que tipo
                de saída de depuração ela deve gerar.  O valor padrão é 
                <literal>0</literal>, que irá silenciar toda a saída de
                depuração.  Para mais informações sobre como o
                Subversion faz uso da biblioteca Neon, veja <xref
                linkend="svn.developer" />.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-authority-files</literal></term>
            <listitem>
              <para>Isto é uma lista de caminhos delimitada por
                pontos-e-vírgulas, para os arquivos que contenham
                certificados das autoridades certificadoras (os CAs) que
                são aceitas pelo cliente Subversion quando acessando
                repositórios sob HTTPS.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-trust-default-ca</literal></term>
            <listitem>
              <para>Defina esta variável para <literal>yes</literal> se
                você quer que o Subversion confie automaticamente no
                conjunto padrão de CAs que vêm com o OpenSSL.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-file</literal></term>
            <listitem>
              <para>Se um host (ou um conjunto de hosts) necessitar de
                um certificado SSL de cliente, você provavelmente será
                solicitado a informar um caminho para seu certificado.
                Ao definir esta variável para o mesmo caminho, o
                Subversion será capaz de encontrar seu certificado de
                cliente automaticamente sem precisa lhe solicitar esta
                informação.  Não há um local padronizado para armazenar
                seu certificado de cliente no disco; o Subversion
                conseguirá lê-lo a partir de qualquer caminho que você
                especificar.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-password</literal></term>
            <listitem>
              <para>Se seu arquivo do certificado de cliente SSL estiver
                criptografado com uma frase-senha, o Subversion irá lhe
                pedir que você forneça a frase-senha toda vez que 
                certificado for usado.  Se você achar isto um estorvo (e
                se não se importa em deixar a senha armazenada no
                arquivo <filename>servers</filename>), então você pode
                definir esta variável para a frase-senha do certificado.
                Assim, esta informação não mais lhe será
                solicitada.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.advanced.confarea.opts.config">
        <title>Config</title>

        <para>The <filename>config</filename> file contains the rest
          of the currently available Subversion run-time options,
          those not related to networking.  There are only a few
          options in use as of this writing, but they are again grouped into
          sections in expectation of future additions.</para>

        <para>The <literal>auth</literal> section contains settings
          related to Subversion's authentication and authorization
          against the repository.  It contains:</para>

        <variablelist>
          <varlistentry>
            <term><literal>store-passwords</literal></term>
            <listitem>
              <para>This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is <literal>yes</literal>.  Set this to
                <literal>no</literal> to disable this on-disk password
                caching.  You can override this option for a single
                instance of the <command>svn</command> command using
                the <option>--no-auth-cache</option> command-line
                parameter (for those subcommands that support it).
                For more information, see <xref
                linkend="svn.serverconfig.netmodel.credcache"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>store-auth-creds</literal></term>
            <listitem>
              <para>This setting is the same as
                <literal>store-passwords</literal>, except that it
                enables or disables disk-caching of
                <emphasis>all</emphasis> authentication information:
                usernames, passwords, server certificates, and any
                other types of cacheable credentials.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <literal>helpers</literal> section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are:</para>

        <variablelist>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
              <para>This specifies the program Subversion will use to
                query the user for a log message during a commit
                operation, such as when using <command>svn
                commit</command> without either the
                <option>--message</option> (<option>-m</option>) or
                <option>--file</option> (<option>-F</option>) options.
                This program is also used with the <command>svn
                propedit</command> command&mdash;a temporary file is
                populated with the current value of the property the
                user wishes to edit, and the edits take place right
                in the editor program (see <xref
                linkend="svn.advanced.props" />).  This option's default
                value is empty.  The order of priority for determining the
                editor command (where lower-numbered locations take 
                precedence over higher-numbered locations) is:</para>
              <orderedlist>
                <listitem>
                  <para>Command-line option <literal>--editor-cmd</literal></para>
                </listitem>
                <listitem>
                  <para>Environment variable <literal>SVN_EDITOR</literal></para>
                </listitem>
                <listitem>
                  <para>Configuration option <literal>editor-cmd</literal></para>
                </listitem>
                <listitem>
                  <para>Environment variable <literal>VISUAL</literal></para>
                </listitem>
                <listitem>
                  <para>Environment variable <literal>EDITOR</literal></para>
                </listitem>
                <listitem>
                  <para>Possibly, a default value built in to Subversion
                    (not present in the official builds)</para>
                </listitem>
              </orderedlist>
              <para>The value of any of these options or variables is
                (unlike <literal>diff-cmd</literal>) the beginning of a
                command line to be executed by the shell.  Subversion
                appends a space and the pathname of the temporary file to be
                edited.  The editor should modify the temporary file and
                return a zero exit code to indicate success.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
              <para>This specifies the absolute path of a differencing
                program, used when Subversion generates
                <quote>diff</quote> output (such as when using the
                <command>svn diff</command> command).  By default
                Subversion uses an internal differencing
                library&mdash;setting this option will cause it to
                perform this task using an external program.  See
                <xref linkend="svn.advanced.externaldifftools"/> for
                more details on using such programs.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
              <para>This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program to
                merge changes made by the user with those received
                from the repository.  By default Subversion uses an
                internal differencing library&mdash;setting this
                option will cause it to perform this task using an
                external program.  See <xref
                linkend="svn.advanced.externaldifftools"/> for more
                details on using such programs.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
              <para>This flag should be set to <literal>true</literal>
                if the program specified by the
                <literal>diff3-cmd</literal> option accepts a
                <option>--diff-program</option> command-line
                parameter.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <literal>tunnels</literal> section allows you to
          define new tunnel schemes for use with
          <command>svnserve</command> and <literal>svn://</literal>
          client connections.  For more details, see <xref
          linkend="svn.serverconfig.svnserve.sshauth"/>.</para>

        <para>The <literal>miscellany</literal> section is where
          everything that doesn't belong elsewhere winds up.
          <footnote>
            <para>Anyone for potluck dinner?</para> 
          </footnote>
          In this section, you can find:</para>

        <variablelist>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
              <para>When running the <command>svn status</command>
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a <literal>?</literal> character (see <xref
                linkend="svn.tour.cycle.examine.status" />).  Sometimes, it can
                be annoying to see uninteresting, unversioned
                items&mdash;for example, object files that result from
                a program's compilation&mdash;in this display.  The
                <literal>global-ignores</literal> option is a list of
                whitespace-delimited globs which describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#* .DS_Store</literal>.</para>

              <para>As well as <command>svn status</command>, the
                <command>svn add</command> and <command>svn import</command>
                commands also ignore files that match the list
                when they are scanning a directory.  You can override this
                behaviour for a single instance of any of these commands
                by explicitly specifying the file name, or by using
                the <option>--no-ignore</option> command-line flag.</para>

              <para>For information on more fine-grained control of
                ignored items, see <xref linkend="svn.advanced.props.special.ignore"
                />.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><literal>enable-auto-props</literal></term>
            <listitem>
              <para>This instructs Subversion to automatically set
                properties on newly added or imported files.  The
                default value is <literal>no</literal>, so set this to
                <literal>yes</literal> to enable Auto-props.
                The <literal>auto-props</literal> section of this file
                specifies which properties are to be set on which files.</para>
            </listitem>            
          </varlistentry>

          <varlistentry>
            <term><literal>log-encoding</literal></term>
            <listitem>         
              <para>This variable sets the default character set
                encoding for commit log messages.  It's a permanent
                form of the <option>--encoding</option> option (see
                <xref linkend="svn.ref.svn.sw"/>).  The Subversion
                repository stores log messages in UTF-8, and assumes
                that your log message is written using your operating
                system's native locale.  You should specify a
                different encoding if your commit messages are written
                in any other encoding.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>use-commit-times</literal></term>
            <listitem>         
              <para>Normally your working copy files have timestamps
                that reflect the last time they were touched by any
                process, whether that be your own editor or by some
                <command>svn</command> subcommand.  This is generally
                convenient for people developing software, because
                build systems often look at timestamps as a way of
                deciding which files need to be recompiled.</para>

              <para>In other situations, however, it's sometimes nice
                for the working copy files to have timestamps that
                reflect the last time they were changed in the
                repository.  The <command>svn export</command> command
                always places these <quote>last-commit
                timestamps</quote> on trees that it produces.  By
                setting this config variable to
                <literal>yes</literal>, the <command>svn
                checkout</command>, <command>svn update</command>,
                <command>svn switch</command>, and <command>svn
                revert</command> commands will also set last-commit
                timestamps on files that they touch.</para>
            </listitem>
          </varlistentry>
          
	  <!-- ###TODO add description of other options shown in example
          registry file, e.g., template-root -->
        </variablelist>

        <para>The <literal>auto-props</literal> section controls
          the Subversion client's ability to automatically set
          properties on files when they are added or imported.
          It contains any number of key-value pairs in the
          format <literal>PATTERN = PROPNAME=PROPVALUE</literal>
          where <literal>PATTERN</literal> is a file pattern
          that matches a set of filenames and the rest of the
          line is the property and its value.  Multiple matches
          on a file will result in multiple propsets for that
          file; however, there is no guarantee that auto-props
          will be applied in the order in which they are listed
          in the config file, so you can't have one rule
          <quote>override</quote> another.  You can find several
          examples of auto-props usage in the
          <filename>config</filename> file.  Lastly, don't
          forget to set <literal>enable-auto-props</literal> to
          <literal>yes</literal> in the <literal>miscellany</literal>
          section if you want to enable auto-props.</para>

      </sect3>

    </sect2>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.l10n">
    <title>Localização</title>

    <para><firstterm>Localização</firstterm> é o ato de fazer com que
      programas comportem-se de um modo específico de região.  Quando um programa
      formata números ou datas em um modo específico para sua parte do
      mundo, ou imprime mensagens (ou aceita uma entrada) em sua linguagem
      nativa, o programa é dito
      ser <firstterm>localizado</firstterm>.  Esta seção descreve os
      passos que o Subversion tem feito a respeito de localização.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.l10n.understanding">
      <title>Compreendendo localidades</title>
      
      <para>A maioria dos sistemas operacionais modernos têm uma noção da
        <quote>localidade atual</quote>&mdash;isto é, a região ou
        país cujas convenções de localização são aplicadas.  Estas
        convenções&mdash;normalmente escolhidas por algum mecanismo de
        configuração de execução no computador&mdash;afetam a forma
        como os programas apresentam dados para o usuário, bem como a forma
        como eles aceitam dados fornecidos pelo usuário.</para>

      <para>Na maioria dos sistemas Unix, você pode verificar os valores das
        opções de configuração relacionadas à localidade pela execução do
        comando <command>locale</command>:</para>

      <screen>
$ locale
LANG=
LC_COLLATE="C"
LC_CTYPE="C"
LC_MESSAGES="C"
LC_MONETARY="C"
LC_NUMERIC="C"
LC_TIME="C"
LC_ALL="C"
</screen>

      <para>A saída é uma lista de variáveis de ambiente, relacionadas com
        a localidade, e seus valores atuais.  Neste exemplo, as
        variáveis estão todas definidas com o local padrão <literal>C</literal>,
        mas os usuários podem definir estas variáveis para especificar
        combinações de código país/idioma.  Por exemplo, se alguém quisesse
        definir a variável <literal>LC_TIME</literal> com o valor
        <literal>fr_CA</literal>, então os programas saberiam apresentar
        informações de data e hora formatadas de acordo com a
        expectativa de um Canadense que fala Francês.  E se alguém quisesse
        definir a variável <literal>LC_MESSAGES</literal> com o valor
        <literal>zh_TW</literal>, então os programas saberiam apresentar
        mensagens legíveis em Chinês Tradicional.  Configurar a
        variável <literal>LC_ALL</literal> tem o efeito de modificar
        todas as variáveis de localidade para o mesmo valor.  O valor de
        <literal>LANG</literal> é utilizado como um valor padrão para qualquer
        variável de localidade que está indefinida.  Para ver a lista de localidades
        disponíveis em um sistema Unix, execute o comando <command>locale
        -a</command>.</para>

      <para>No Windows, a configuração de localidade é feita por meio do
        item <quote>Opções Regionais e de Idioma</quote> no painel de
        controle.  Lá você poderá ver e selecionar os valores das configurações
        individuais das localidades disponíveis, e até mesmo personalizar (a um
        nível de detalhe enjoativo) várias das convenções de formatação de
        exibição.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.l10n.svnuse">
      <title>Subversion's use of locales</title>

      <para>The Subversion client, <command>svn</command>, honors the
        current locale configuration in two ways.  First, it notices
        the value of the <literal>LC_MESSAGES</literal> variable and
        attempts to print all messages in the specified language.  For
        example:</para>

      <screen>
$ export LC_MESSAGES=de_DE
$ svn help cat
cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.
Aufruf: cat ZIEL[@REV]...
&hellip;
</screen>

      <para>This behavior works identically on both Unix and Windows
        systems.  Note, though, that while your operating system might
        have support for a certain locale, the Subversion client still
        may not be able to speak the particular language.  In order to
        produce localized messages, human volunteers must provide
        translations for each language.  The translations are written
        using the GNU gettext package, which results in translation
        modules that end with the <filename>.mo</filename> filename
        extension.  For example, the German translation file is named
        <filename>de.mo</filename>.  These translation files are
        installed somewhere on your system.  On Unix, they typically
        live in <filename>/usr/share/locale/</filename>, while
        on Windows they're often found in the
        <filename>\share\locale\</filename> folder in Subversion's
        installation area.  Once installed, a module is named after
        the program it provides translations for.  For example, the
        <filename>de.mo</filename> file may ultimately end up
        installed as
        <filename>/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename>.
        By browsing the installed <filename>.mo</filename> files, you
        can see which languages the Subversion client is able to
        speak.</para>

      <para>The second way in which the locale is honored involves how
        <command>svn</command> interprets your input.  The repository
        stores all paths, filenames, and log messages in Unicode,
        encoded as UTF-8.  In that sense, the repository is
        <firstterm>internationalized</firstterm>&mdash;that is, the
        repository is ready to accept input in any human language.
        This means, however, that the Subversion client is responsible
        for sending only UTF-8 filenames and log messages into the
        repository.  In order to do this, it must convert the data
        from the native locale into UTF-8.</para>

      <para>For example, suppose you create a file named
        <filename>caffÃ¨.txt</filename>, and then when committing the
        file, you write the log message as <quote>Adesso il caffÃ¨ Ã¨
        piÃ¹ forte</quote>.  Both the filename and log message contain
        non-ASCII characters, but because your locale is set to
        <literal>it_IT</literal>, the Subversion client knows to
        interpret them as Italian.  It uses an Italian character set
        to convert the data to UTF-8 before sending them off to the
        repository.</para>

      <para>Note that while the repository demands UTF-8 filenames and
        log messages, it <emphasis>does not</emphasis> pay attention
        to file contents.  Subversion treats file contents as opaque
        strings of bytes, and neither client nor server makes an
        attempt to understand the character set or encoding of the
        contents.</para>

      <sidebar>
        <title>Character set conversion errors</title>

        <para>While using Subversion, you might get hit with an error
          related to character set conversions:</para>

        <screen>
svn: Can't convert string from native encoding to 'UTF-8':
&hellip;
svn: Can't convert string from 'UTF-8' to native encoding:
&hellip;
</screen>
    
        <para>Errors like this typically occur when the Subversion
          client has received a UTF-8 string from the repository, but
          not all of the characters in that string can be represented
          using the encoding of the current locale.  For example, if
          your locale is <literal>en_US</literal> but a collaborator
          has committed a Japanese filename, you're likely to see this
          error when you receive the file during an <command>svn
          update</command>.</para>

        <para>The solution is either to set your locale to something
          which <emphasis>can</emphasis> represent the incoming UTF-8
          data, or to change the filename or log message in the
          repository.  (And don't forget to slap your collaborator's
          hand&mdash;projects should decide on common languages ahead of
          time, so that all participants are using the same
          locale.)</para>
      </sidebar>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.advanced.externaldifftools">
    <title>Using External Differencing Tools</title>

    <para>The presence of <option>--diff-cmd</option> and
      <option>--diff3-cmd</option> options, and similarly named
      runtime configuration parameters (see <xref
      linkend="svn.advanced.confarea.opts.config"/>), can lead to a
      false notion of how easy it is to use external differencing (or
      <quote>diff</quote>) and merge tools with Subversion.  While
      Subversion can use most of popular such tools available, the
      effort invested in setting this up often turns out to be
      non-trivial.</para>

    <para>The interface between Subversion and external diff and merge
      tools harkens back to a time when Subversion's only contextual
      differencing capabilities were built around invocations of the
      GNU diffutils toolchain, specifically the
      <command>diff</command> and <command>diff3</command> utilities.
      To get the kind of behavior Subversion needed, it called these
      utilities with more than a handful of options and parameters,
      most of which were quite specific to the utilities.  Some time
      later, Subversion grew its own internal differencing library,
      and as a failover mechanism,
      <footnote>
        <para>Subversion developers are good, but even the best make
          mistakes.</para>
      </footnote>
      the <option>--diff-cmd</option> and <option>--diff3-cmd</option>
      options were added to the Subversion command-line client so
      users could more easily indicate that they preferred to use the
      GNU diff and diff3 utilities instead of the newfangled internal
      diff library.  If those options were used, Subversion would
      simply ignore the internal diff library, and fall back to
      running those external programs, lengthy argument lists and all.
      And that's where things remain today.</para>

    <para>It didn't take long for folks to realize that having such
      easy configuration mechanisms for specifying that Subversion
      should use the external GNU diff and diff3 utilities located at
      a particular place on the system could be applied toward the use
      of other diff and merge tools, too.  After all, Subversion
      didn't actually verify that the things it was being told to run
      were members of the GNU diffutils toolchain.  But the only
      configurable aspect of using those external tools is their
      location on the system&mdash;not the option set, parameter
      order, etc.  Subversion continues throwing all those GNU utility
      options at your external diff tool regardless of whether or not
      that program can understand those options.  And that's where
      things get unintuitive for most users.</para>

    <para>The key to using external diff and merge tools (other than
      GNU diff and diff3, of course) with Subversion is to use wrapper
      scripts which convert the input from Subversion into something
      that your differencing tool can understand, and then to convert
      the output of your tool back into a format which Subversion
      expects&mdash;the format that the GNU tools would have used.
      The following sections cover the specifics of those
      expectations.</para>

    <note>
      <para>The decision on when to fire off a contextual diff or
        merge as part of a larger Subversion operation is made
        entirely by Subversion, and is affected by, among other
        things, whether or not the files being operated on are
        human-readable as determined by their
        <literal>svn:mime-type</literal> property.  This means, for
        example, that even if you had the niftiest Microsoft
        Word-aware differencing or merging tool in the Universe, it
        would never be invoked by Subversion so long as your versioned
        Word documents had a configured MIME type that denoted that
        they were not human-readable (such as
        <literal>application/msword</literal>).  For more about MIME
        type settings, see <xref
        linkend="svn.advanced.props.special.mime-type"/></para>
    </note>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.externaldifftools.diff">
      <title>External diff</title>

      <para>Subversion calls external diff programs with parameters
        suitable for the GNU diff utility, and expects only that the
        external program return with a successful error code.  For
        most alternative diff programs, only the sixth and seventh
        arguments&mdash;the paths of the files which represent the left and
        right sides of the diff, respectively&mdash;are of interest.  Note
        that Subversion runs the diff program once per modified file
        covered by the Subversion operation, so if your program runs
        in an asynchronous fashion (or <quote>backgrounded</quote>),
        you might have several instances of it all running
        simultaneously.  Finally, Subversion expects that your program
        return an error code of 1 if your program detected differences,
        or 0 if it did not&mdash;any other error code is considered a
        fatal error.
        <footnote>
          <para>The GNU diff manual page puts it this way: <quote>An
            exit status of 0 means no differences were found, 1 means some
            differences were found, and 2 means trouble.</quote></para>
        </footnote>
      </para>

      <para><xref linkend="svn.advanced.externaldifftools.diff.ex-1"/>
        and <xref linkend="svn.advanced.externaldifftools.diff.ex-2"/>
        are templates for external diff tool wrappers in the Bourne
        shell and Windows batch scripting languages,
        respectively.</para>

      <example id="svn.advanced.externaldifftools.diff.ex-1">
        <title>diffwrap.sh</title>
        <programlisting>
#!/bin/sh

# Configure your favorite diff program here.
DIFF="/usr/local/bin/my-diff-tool"

# Subversion provides the paths we need as the sixth and seventh 
# parameters.
LEFT=${6}
RIGHT=${7}

# Call the diff command (change the following line to make sense for
# your merge program).
$DIFF --left $LEFT --right $RIGHT

# Return an errorcode of 0 if no differences were detected, 1 if some were.
# Any other errorcode will be treated as fatal.
</programlisting>
      </example>

      <example id="svn.advanced.externaldifftools.diff.ex-2">
        <title>diffwrap.bat</title>
        <programlisting>
@ECHO OFF

REM Configure your favorite diff program here.
SET DIFF="C:\Program Files\Funky Stuff\My Diff Tool.exe"

REM Subversion provides the paths we need as the sixth and seventh 
REM parameters.
SET LEFT=%6
SET RIGHT=%7

REM Call the diff command (change the following line to make sense for
REM your merge program).
%DIFF% --left %LEFT% --right %RIGHT%

REM Return an errorcode of 0 if no differences were detected, 1 if some were.
REM Any other errorcode will be treated as fatal.
</programlisting>
      </example>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.advanced.externaldifftools.diff3">
      <title>External diff3</title>

      <para>Subversion calls external merge programs with parameters
        suitable for the GNU diff3 utility, expecting that the
        external program return with a successful error code and that
        the full file contents which result from the completed merge
        operation are printed on the standard output stream (so that
        Subversion can redirect them into the appropriate version
        controlled file).  For most alternative merge programs, only
        the ninth, tenth, and eleventh arguments, the paths of the
        files which represent the <quote>mine</quote>,
        <quote>older</quote>, and <quote>yours</quote> inputs,
        respectively, are of interest.  Note that because Subversion
        depends on the output of your merge program, you wrapper
        script must not exit before that output has been delivered to
        Subversion.  When it finally does exit, it should return an
        error code of 0 if the merge was successful, or 1 if unresolved
        conflicts remain in the output&mdash;any other error code is
        considered a fatal error.</para>

      <para><xref linkend="svn.advanced.externaldifftools.diff3.ex-1"/> 
        and <xref linkend="svn.advanced.externaldifftools.diff3.ex-2"/> are
        templates for external merge tool wrappers in the Bourne shell
        and Windows batch scripting languages, respectively.</para>

      <example id="svn.advanced.externaldifftools.diff3.ex-1">
        <title>diff3wrap.sh</title>
        <programlisting>
#!/bin/sh

# Configure your favorite diff3/merge program here.
DIFF3="/usr/local/bin/my-merge-tool"

# Subversion provides the paths we need as the ninth, tenth, and eleventh 
# parameters.
MINE=${9}
OLDER=${10}
YOURS=${11}

# Call the merge command (change the following line to make sense for
# your merge program).
$DIFF3 --older $OLDER --mine $MINE --yours $YOURS

# After performing the merge, this script needs to print the contents
# of the merged file to stdout.  Do that in whatever way you see fit.
# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
# remain in the result.  Any other errorcode will be treated as fatal.
</programlisting>
      </example>

      <example id="svn.advanced.externaldifftools.diff3.ex-2">
        <title>diff3wrap.bat</title>
        <programlisting>
@ECHO OFF

REM Configure your favorite diff3/merge program here.
SET DIFF3="C:\Program Files\Funky Stuff\My Merge Tool.exe"

REM Subversion provides the paths we need as the ninth, tenth, and eleventh 
REM parameters.  But we only have access to nine parameters at a time, so we
REM shift our nine-parameter window twice to let us get to what we need.
SHIFT
SHIFT
SET MINE=%7
SET OLDER=%8
SET YOURS=%9

REM Call the merge command (change the following line to make sense for
REM your merge program).
%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%

REM After performing the merge, this script needs to print the contents
REM of the merged file to stdout.  Do that in whatever way you see fit.
REM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
REM remain in the result.  Any other errorcode will be treated as fatal.
</programlisting>
      </example>

    </sect2>
  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
